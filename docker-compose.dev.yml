version: '3.8'

services:
  postgres:
    image: pgvector/pgvector:pg16
    container_name: mental_health_postgres_dev
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
    ports:
      - "${POSTGRES_PORT:-5432}:5432"
    volumes:
      - postgres_data_dev:/var/lib/postgresql/data
      - ./server/init-db/01-enable-pgvector.sql:/docker-entrypoint-initdb.d/01-enable-pgvector.sql
      - ./server/init-db/02-create-tables.sql:/docker-entrypoint-initdb.d/02-create-tables.sql
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-mental_health_user} -d ${POSTGRES_DB:-mental_health_db}"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - app-network

  db-init:
    build:
      context: ./server
      dockerfile: Dockerfile.db-init
    container_name: mental_health_db_init_dev
    environment:
      POSTGRES_HOST: postgres
      POSTGRES_PORT: 5432
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - app-network
    restart: "no"

  client:
    build:
      context: ./client
      dockerfile: Dockerfile.dev
    ports:
      - "5174:5173"
    volumes:
      - ./client:/app
      - /app/node_modules
    environment:
      - CHOKIDAR_USEPOLLING=true
    depends_on:
      - server
    networks:
      - app-network

  server:
    build:
      context: ./server
      dockerfile: Dockerfile
    ports:
      - "5001:5001"
    environment:
      - HOST=0.0.0.0
      - PORT=5001
      - POSTGRES_HOST=postgres
      - POSTGRES_PORT=5432
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_DB=${POSTGRES_DB}
    volumes:
      - ./server:/app
    depends_on:
      postgres:
        condition: service_healthy
      db-init:
        condition: service_completed_successfully
    networks:
      - app-network

volumes:
  postgres_data_dev:

networks:
  app-network:
    driver: bridge